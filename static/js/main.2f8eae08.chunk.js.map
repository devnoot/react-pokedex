{"version":3,"sources":["components/Selector.js","components/TypePill.js","App.js","index.js"],"names":["Selector","state","pokemon","onSelectPokemon","this","props","setState","selected","data","offset","ListGroup","map","pkmn","i","Item","key","onClick","onSelect","action","className","active","Badge","variant","name","Component","colors","normal","fire","water","electric","grass","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dragon","dark","steel","fairy","unknown","TypePill","type","style","backgroundColor","App","isLoading","error","selectionList","nextURL","prevURL","limit","getPokemon","window","tts","speechSynthesis","url","fetch","then","res","json","results","previous","next","catch","finally","getPokedexEntry","species","speciesURL","lang","filtered","flavor_text_entries","filter","entry","language","description","flavor_text","getDetailedStats","params","URL","searchParams","get","text","cancel","utterance","SpeechSynthesisUtterance","speak","Container","Row","Col","md","padding","id","types","typedef","height","weight","speaking","src","sprites","front_default","alt","front_shiny","Button","prev","disabled","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f8eae08.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ListGroup from \"react-bootstrap/Listgroup\";\nimport Badge from \"react-bootstrap/Badge\";\n\nclass Selector extends Component {\n  state = {};\n\n  onSelect(pokemon) {\n    const { onSelectPokemon } = this.props;\n    this.setState({ selected: pokemon });\n    onSelectPokemon(pokemon);\n  }\n\n  render() {\n    const { data, offset } = this.props;\n    const { selected } = this.state;\n\n    return (\n      <ListGroup>\n        {data.map((pkmn, i) => (\n          <ListGroup.Item\n            key={i}\n            onClick={() => this.onSelect(pkmn)}\n            action\n            className=\"text-capitalize\"\n            active={pkmn === selected}\n          >\n            <Badge variant={pkmn === selected ? \"light\" : \"secondary\"}>\n              {i + offset + 1}\n            </Badge>{\" \"}\n            {pkmn.name}\n          </ListGroup.Item>\n        ))}\n      </ListGroup>\n    );\n  }\n}\n\nSelector.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  offset: PropTypes.number.isRequired\n};\n\nexport default Selector;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Badge from \"react-bootstrap/Badge\";\n\nconst colors = {\n  normal: \"#A8A77A\",\n  fire: \"#EE8130\",\n  water: \"#6390F0\",\n  electric: \"#F7D02C\",\n  grass: \"#7AC74C\",\n  ice: \"#96D9D6\",\n  fighting: \"#C22E28\",\n  poison: \"#A33EA1\",\n  ground: \"#E2BF65\",\n  flying: \"#A98FF3\",\n  psychic: \"#F95587\",\n  bug: \"#A6B91A\",\n  rock: \"#B6A136\",\n  ghost: \"#735797\",\n  dragon: \"#6F35FC\",\n  dark: \"#705746\",\n  steel: \"#B7B7CE\",\n  fairy: \"#D685AD\",\n  unknown: \"#68A090\"\n};\n\nconst TypePill = ({ type }) => (\n  <Badge style={{ backgroundColor: colors[type] }} className=\"mr-2\">\n    {type}\n  </Badge>\n);\n\nTypePill.propTypes = {\n  type: PropTypes.string.isRequired\n};\n\nexport default TypePill;\n","import React, { Component } from \"react\";\nimport Selector from \"./components/Selector\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Badge from \"react-bootstrap/Badge\";\nimport TypePill from \"./components/TypePill\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    isLoading: false,\n    error: \"\",\n    selected: \"\",\n    selectionList: \"\",\n    nextURL: \"\",\n    prevURL: \"\",\n    offset: 0,\n    limit: 10\n  };\n\n  componentDidMount() {\n    // When the component mounts, grab a bunch of pokemon from the API\n    const { offset, limit } = this.state;\n    this.getPokemon(\n      `https://pokeapi.co/api/v2/pokemon/?limit=${limit}&offset=${offset}`\n    );\n\n    // Set up tts\n    if (\"speechSynthesis\" in window) {\n      this.setState({ tts: window.speechSynthesis });\n    }\n  }\n\n  getPokemon(url) {\n    this.setState({ isLoading: true });\n    fetch(url)\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          selectionList: res.results,\n          prevURL: res.previous,\n          nextURL: res.next\n        });\n      })\n      .catch(error => this.setState({ error }))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  getDetailedStats(url) {\n    this.setState({ isLoading: true });\n    fetch(url)\n      .then(res => res.json())\n      .then(res => {\n        this.setState({ selected: res });\n        this.getPokedexEntry(res.species.url);\n        // Get the species and the pokedex entry\n      })\n      .catch(error => this.setState({ error }))\n  }\n\n  getPokedexEntry(speciesURL, lang) {\n    this.setState({ isLoading: true }); \n    fetch(speciesURL)\n      .then(res => res.json())\n      .then(species => {\n        const entries = species.flavor_text_entries;\n        const filtered = entries.filter(entry => entry.language.name === \"en\") \n        this.setState({ description: filtered[0].flavor_text });\n      })\n      .catch(error => this.setState({ error }))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  onSelect(pokemon) {\n    this.getDetailedStats(pokemon.url);\n  }\n\n  next() {\n    // Set the offset and limit based on the URL\n    const url = new URL(this.state.nextURL);\n    const params = url.searchParams;\n    const limit = params.get(\"limit\");\n    const offset = params.get(\"offset\");\n    this.setState({ offset, limit });\n    this.getPokemon(this.state.nextURL);\n  }\n\n  prev() {\n    const url = new URL(this.state.prevURL);\n    const params = url.searchParams;\n    const limit = params.get(\"limit\");\n    const offset = params.get(\"offset\");\n    this.setState({ offset, limit });\n    this.getPokemon(this.state.prevURL);\n  }\n\n  speak(text) {\n    const { tts } = this.state;\n    tts.cancel();\n    const utterance = new SpeechSynthesisUtterance(text);\n    tts.speak(utterance);\n  }\n\n  render() {\n    const {\n      selected,\n      selectionList,\n      error,\n      isLoading,\n      offset,\n      limit,\n      prevURL,\n      description,\n      tts\n    } = this.state;\n\n    /* \n    The pokedex can have one of two views, the first view is a selection \n    on the right side of the screen, with a portrait of the pokemon on\n    the left side. The second view is invoked when the user \"clicks\" on \n    the pokemon from the scroll list. This view is a horizontal split\n    wherein, on the top is an image of the pokemon, along with some stats.\n    The bottom portion is the description of the pokemon. This view is \n    very similar to the Gen 1 pokedex in the Pokemon games.\n    */\n\n    return (\n      <div className=\"App\">\n        <main className=\"mt-4\">\n          {/* First, if there's an error, display it */}\n          {error && <p>{error}</p>}\n\n          <Container>\n            <Row>\n              <Col md={6}>\n                {/* When a pokemon is selected, display the details here */}\n                {isLoading && <div className=\"loader\"></div>}\n                {selected && !isLoading && (\n                  <div style={{ padding: \"1em\" }}>\n                    <h3>\n                      <Badge variant=\"primary\">#{selected.id}</Badge>\n                      <span className=\"ml-2 text-capitalize\">\n                        {selected.name}\n                      </span>\n                    </h3>\n                    {/* Display the type or types */}\n                    {selected.types.map((typedef, i) => (<TypePill key={i} type={typedef.type.name} />))}\n                    <p className=\"text-muted mt-3\">\n                      {+selected.height * 10} cm / {+selected.weight / 10} kg\n                    </p>\n\n                    <p className=\"text-justify\">{description}{!tts.speaking && this.speak(`${selected.name}, ${description}`)}</p>\n\n                    <img\n                      src={selected.sprites.front_default}\n                      alt={`${selected.name} normal form`}\n                    />\n                    <img\n                      src={selected.sprites.front_shiny}\n                      alt={`${selected.name} shiny form`}\n                    />\n\n                  </div>\n                )}\n              </Col>\n              <Col md={6}>\n                <p className=\"text-muted text-uppercase\">\n                  Displaying {+offset} - {+offset + +limit}\n                </p>\n                \n                {/*\n                For each pokemon that should be shown (there should be a max\n                limit) display them in a list \n                */}\n                {selectionList && (\n                  <Selector\n                    data={selectionList}\n                    onSelectPokemon={pokemon => this.onSelect(pokemon)}\n                    offset={+offset}\n                  />\n                )}\n\n                {/*\n                There should be a scroll up and scroll down action available, doing so should\n                grab the next \"page\" of Pokemon from the API\n              */}\n                <div className=\"mt-3\">\n                  <Button\n                    className=\"mr-2\"\n                    onClick={() => this.prev()}\n                    variant=\"text\"\n                    disabled={!prevURL}\n                  >\n                    Back\n                  </Button>\n                  <Button onClick={() => this.next()} variant=\"text\">\n                    Next\n                  </Button>\n                </div>\n              </Col>\n            </Row>\n          </Container>\n        </main>\n\n        <footer className=\"mt-5\">\n          <Container>\n            <Row>\n              <Col>\n                <p className=\"text-center text-muted\">\n                  Built by <a href=\"https://twitter.com/devnoot\">devnoot</a>{\" \"}\n                  using <a href=\"https://pokespi.co\">PokeAPI</a>\n                </p>\n              </Col>\n            </Row>\n          </Container>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}